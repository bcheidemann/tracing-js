export const snapshot = {};

snapshot[`all-features example > should match the snapshot 1`] = `
"[1970-01-01T00:00:00.000Z] [DEBUG] info span 1{key=value}: this should be logged
[1970-01-01T00:00:00.000Z] [INFO] info span 1{key=value}: this should be logged with a value (key=value)
[1970-01-01T00:00:00.000Z] [DEBUG] info span 1{key=value}:error span: this should be logged
[1970-01-01T00:00:00.000Z] [INFO] info span 1{key=value}:error span: this should be logged with a value (key=value)
[1970-01-01T00:00:00.000Z] [INFO] Example.basicInstrumention: basic instrumentation
[1970-01-01T00:00:00.000Z] [INFO] custom message: custom message
[1970-01-01T00:00:00.000Z] [INFO] Example.field{key=value}: field
[1970-01-01T00:00:00.000Z] [INFO] Example.log: Entering Example.log
[1970-01-01T00:00:00.000Z] [INFO] Example.log: log
[1970-01-01T00:00:00.000Z] [INFO] Example.log: Exiting Example.log
[1970-01-01T00:00:00.000Z] [INFO] Example.logEnter: Entering Example.logEnter
[1970-01-01T00:00:00.000Z] [INFO] Example.logEnter: log enter
[1970-01-01T00:00:00.000Z] [INFO] Example.logError: log error
[1970-01-01T00:00:00.000Z] [ERROR] Example.logError: Error in Example.logError (error.name=Error, error.message=whoops!, error.stack=Error: whoops!
    at <wildcard>
    at <wildcard>
    at <wildcard>
    at <wildcard>
    at <wildcard>
    at <wildcard>
    at <wildcard>
[1970-01-01T00:00:00.000Z] [INFO] Example.logExit: log exit
[1970-01-01T00:00:00.000Z] [INFO] Example.logExit: Exiting Example.logExit
[1970-01-01T00:00:00.000Z] [INFO] Example.logReturnValue: log return value
[1970-01-01T00:00:00.000Z] [INFO] Example.logReturnValue: Exiting Example.logReturnValue (returnValue=return value)
[1970-01-01T00:00:00.000Z] [INFO] Example.skipAll: skip all
[1970-01-01T00:00:00.000Z] [INFO] Example.skipByName{args.0=arg0, args.2=arg2}: skip by name
[1970-01-01T00:00:00.000Z] [INFO] Example.redactByName{args.0=[REDACTED], args.1=arg1, args.2=arg2}: redact by name
[1970-01-01T00:00:00.000Z] [INFO] Example.redactByIndex{args.0=[REDACTED], args.1=arg1, args.2=arg2}: redact by index
[1970-01-01T00:00:00.000Z] [INFO] Example.redactFieldByName{args.0.username=test, args.0.password=[REDACTED], args.1=arg1, args.2=arg2}: redact field by name
[1970-01-01T00:00:00.000Z] [INFO] Example.redactFieldByIndex{args.0.username=test, args.0.password=[REDACTED], args.1=arg1, args.2=arg2}: redact field by index
[1970-01-01T00:00:00.000Z] [INFO] Example.redactDeepFieldByName{args.0.req.credentials.username=test, args.0.req.credentials.password=[REDACTED], args.1=arg1, args.2=arg2}: redact field by name
[1970-01-01T00:00:00.000Z] [INFO] Example.redactDeepFieldByIndex{args.0.req.credentials.username=test, args.0.req.credentials.password=[REDACTED], args.1=arg1, args.2=arg2}: redact field by index
[1970-01-01T00:00:00.000Z] [INFO] ExampleClass.targetMethod: target
"
`;

snapshot[`api-class-instrumentation example > should match the snapshot 1`] = `
"[1970-01-01T00:00:00.000Z] [INFO] request{requestId=123}:LoginController.login{args.0=user}: Entering LoginController.login
[1970-01-01T00:00:00.000Z] [ERROR] request{requestId=123}:LoginController.login{args.0=user}:AuthService.login{args.0=user}:UserRepository.findUserByUsername{args.0=user}: Found user matching username (returnValue.user.id=42)
[1970-01-01T00:00:00.000Z] [INFO] request{requestId=123}:LoginController.login{args.0=user}:AuthService.login{args.0=user}:TokenRepository.generateUserToken{args.0=42}: Issuing tokens for user
[1970-01-01T00:00:00.000Z] [INFO] request{requestId=123}:LoginController.login{args.0=user}: Exiting LoginController.login
[1970-01-01T00:00:00.000Z] [DEBUG] request{requestId=123}: Issued tokens (tokens.authToken=eyJhbGciOiJIUzI1...POk6yJV_adQssw5c, tokens.refreshToken=eyJhbGciOiJIUzI1...iIRyXaPwXFfeigrU)
"
`;

snapshot[`basic example > should match the snapshot 1`] = `
"[1970-01-01T00:00:00.000Z] [TRACE] basic-example{dummy=value}: This is a trace message (key=value)
[1970-01-01T00:00:00.000Z] [DEBUG] basic-example{dummy=value}: This is a debug message (key=value)
[1970-01-01T00:00:00.000Z] [INFO] basic-example{dummy=value}: This is an info message (key=value)
[1970-01-01T00:00:00.000Z] [WARN] basic-example{dummy=value}: This is a warn message (key=value)
[1970-01-01T00:00:00.000Z] [ERROR] basic-example{dummy=value}: This is an error message (key=value)
[1970-01-01T00:00:00.000Z] [CRITICAL] basic-example{dummy=value}: This is a critical message (key=value)
"
`;

snapshot[`basic-json example > should match the snapshot 1`] = `
'{"timestamp":"1970-01-01T00:00:00.000Z","level":"TRACE","message":"This is a trace message","fields":{"key":"value"},"spans":[{"level":"INFO","message":"basic-example","fields":{"dummy":"value"}}]}
{"timestamp":"1970-01-01T00:00:00.000Z","level":"DEBUG","message":"This is a debug message","fields":{"key":"value"},"spans":[{"level":"INFO","message":"basic-example","fields":{"dummy":"value"}}]}
{"timestamp":"1970-01-01T00:00:00.000Z","level":"INFO","message":"This is an info message","fields":{"key":"value"},"spans":[{"level":"INFO","message":"basic-example","fields":{"dummy":"value"}}]}
{"timestamp":"1970-01-01T00:00:00.000Z","level":"WARN","message":"This is a warn message","fields":{"key":"value"},"spans":[{"level":"INFO","message":"basic-example","fields":{"dummy":"value"}}]}
{"timestamp":"1970-01-01T00:00:00.000Z","level":"ERROR","message":"This is an error message","fields":{"key":"value"},"spans":[{"level":"INFO","message":"basic-example","fields":{"dummy":"value"}}]}
{"timestamp":"1970-01-01T00:00:00.000Z","level":"CRITICAL","message":"This is a critical message","fields":{"key":"value"},"spans":[{"level":"INFO","message":"basic-example","fields":{"dummy":"value"}}]}
'
`;

snapshot[`legacy-decorators example > should match the snapshot 1`] = `
"Warning experimentalDecorators compiler option is deprecated and may be removed at <wildcard>
[1970-01-01T00:00:00.000Z] [INFO] Example.basicInstrumention: basic instrumentation
"
`;
